{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-algebric-type/","result":{"data":{"site":{"siteMetadata":{"title":"Onepredict Engineering"}},"markdownRemark":{"id":"d6f7f694-22c7-51a5-86e8-60704914dc4c","excerpt":"기존에 발행된 글을\n정리해서 다시 소개합니다.  Intro. 고전적인 웹 애플리케이션들은 순수한 HTML, CSS, Javascript의 세 언어만\n이용하여 구성되었습니다.\n그중에서 웹페이지의 상호작용 및 동작을 수행하는 JavaScript…","html":"<blockquote>\n<p><a href=\"https://tech.onepredict.ai/4d9f807b-12ae-40ac-a828-0390ee5e21ea\">기존에 발행된 글</a>을\n정리해서 다시 소개합니다. <sup id=\"fnref-주1\"><a href=\"#fn-주1\" class=\"footnote-ref\">주1</a></sup></p>\n</blockquote>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro.</h2>\n<p>고전적인 웹 애플리케이션들은 순수한 <strong>HTML, CSS, Javascript</strong>의 세 언어만\n이용하여 구성되었습니다.\n그중에서 웹페이지의 상호작용 및 동작을 수행하는 JavaScript는 동적 타입\n언어로써 프로그램에 사용된 각 심볼의 타입이 실행되는 순간에 평가되기 때문에\n매우 유연하게 작성할 수 있다는 장점이 있고,\n브라우저에서 실행 가능한 언어로써 지금까지도 많이 쓰이고 있습니다.</p>\n<p>그러나 JavaScript를 이용하여 작성된 프로그램에서는 많은 에러들이 런타임에\n발생하고, 이런 런타임 에러들은 발생하기 전에는 찾거나 수정하기 상당히\n까다롭다는 단점을 가지고 있기 때문에 모던 웹 개발에서는 이러한 문제를\n해결하고자 <strong>TypeScript</strong>라는 JavaScript의 확장을 이용하고 있습니다.</p>\n<p>원프레딕트 프론트엔드 팀은 위에서 언급한 이유로 TypeScript를 이용한\n타입 시스템을 기반으로 개발하고 있습니다.\n타입 시스템을 기반으로 하는 개발은 런타임에 발생할 수 있는 예외 상황들을\n린터 등을 통해 컴파일 타임에 미리 배제할 수 있으며,\n함수에 유효하지 않은 값이 넘겨지는 상황 등을 미연에 방지할 수 있습니다.</p>\n<p>타입 시스템을 기반으로 실행 전에 신뢰할 수 있는 프로그램의 형태를 구성하기\n위해서 **“대수적 데이터 타입(Algebraic Data Type, 이하 ADT)”**이라는\n개념을 이용하고 있습니다.\n본 글에서는 이 대수적 데이터 타입이 무엇인지,\n간단한 예시를 통해 설명하고자 합니다.</p>\n<p>함수형 프로그래밍과 범주론에서는 ADT이라는 합성 타입을 이용하여 하위 타입들을\n확장하고, 더 큰 범주의 타입을 설계할 수 있습니다.</p>\n<p>가장 일반적인 ADT의 종류에는 다음의 두 가지가 있습니다.</p>\n<ul>\n<li>합 타입(Sum Type, 혹은 Variants, Tagged Union)</li>\n<li>곱 타입(Product Type, 혹은 Record, Tuple)</li>\n</ul>\n<h2 id=\"합-타입sum-type\" style=\"position:relative;\"><a href=\"#%ED%95%A9-%ED%83%80%EC%9E%85sum-type\" aria-label=\"합 타입sum type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합 타입(Sum Type)</h2>\n<p>합 타입은 하위 타입 중 하나만 가지는 타입입니다.\n합 타입으로 구성되는 타입 집합의 크기(카디널리티)는 하위 타입 집합 크기의\n합과 같습니다</p>\n<p>예를 들어, 트럼프 카드 세트와 타로 카드 세트를 포함하며 현실 세계의\n카드 게임에 쓰이는 카드들의 세트를 모방하는 임의의 <code class=\"language-text\">CardSet</code> 타입은\n다음과 같이 나타낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">CardSet</span> <span class=\"token operator\">=</span> TrumpCard <span class=\"token operator\">|</span> TarotCard<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 <code class=\"language-text\">CardSet</code>은 <code class=\"language-text\">TrumpCard</code>가 나타낼 수 있는 모든 카드와 <code class=\"language-text\">TarotCard</code>가\n나타낼 수 있는 모든 카드를 포함합니다.\n이는 트럼프 카드 세트의 “♠️4”나 타로 카드 세트의 “Fool” 카드가 하나의\n<strong>카드</strong>라는 집합에 속하지만 하나의 카드가 한 번에 하나의 하위 타입에만\n속한다는 것을 생각하면 당연한 구조입니다.\n따라서 타입 <code class=\"language-text\">CardSet</code>이 나타낼 수 있는 카드의 수\n<i>N<sub>CardSet</sub></i>는\n(트럼프 카드의 수 <i>N<sub>TrumpCard</sub></i> + 타로 카드의 수\n<i>N<sub>TarotCard</sub></i>)와 같습니다.</p>\n<h2 id=\"곱-타입product-type\" style=\"position:relative;\"><a href=\"#%EA%B3%B1-%ED%83%80%EC%9E%85product-type\" aria-label=\"곱 타입product type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>곱 타입(Product Type)</h2>\n<p>곱 타입은 하위 타입을 동시에 가지는 타입입니다.\n곱 타입으로 구성되는 타입 집합의 크기는 하위 타입 집합의 곱과 같습니다.</p>\n<p>위의 예제에 이어, 하나의 트럼프 카드는 문양을 나타내는 <strong>Suit</strong>와\n그 카드의 값인 <strong>Rank</strong>를 동시에 가지므로, 다음과 같이 나타낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpRank</span> <span class=\"token operator\">=</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span>\n  <span class=\"token operator\">|</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span>\n  <span class=\"token operator\">|</span> <span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token number\">10</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">\"Jack\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Queen\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"King\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpSuit</span> <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"♠️\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"♣️\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"♥️\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"♦️\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpCard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>TrumpSuit<span class=\"token punctuation\">,</span> TrumpRank<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서는 <code class=\"language-text\">TrumpCard</code>라는 하나의 타입을 <code class=\"language-text\">TrumpSuit</code>와 <code class=\"language-text\">TrumpRank</code>로 구성된\n튜플 타입으로 나타내었습니다.\n여기서 타입 <code class=\"language-text\">TrumpCard</code>가 나타낼 수 있는 카드의 수\n<i>N<sub>TrumpCard</sub></i>는\n(카드의 문양 수 <i>N<sub>Suit</sub></i> * 카드의 랭크 수\n<i>N<sub>Rank</sub></i>)입니다.\n이는 <code class=\"language-text\">TrumpRank</code>와 <code class=\"language-text\">TrumpSuit</code>가 가지는 집합의 크기는 각각 13과 4이므로,\n<code class=\"language-text\">TrumpCard</code> 타입 집합의 크기는 52로 결정됨을 의미합니다.</p>\n<p>튜플 타입의 하위 타입은 인덱스를 통해 접근할 수 있으나,\n코드를 작성할 때 튜플 타입을 인덱스로 접근하는 것이 직관적이지 않고\n코드의 가독성을 해치므로,\n일반적으로 TypeScript에서는 튜플 타입 대신 <strong>Record Type</strong>을 통해\nProduct Type을 이용합니다.\n위의 <code class=\"language-text\">TrumpCard</code> 타입은 Record로 변환하면 다음과 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpCard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  suit<span class=\"token operator\">:</span> TrumpSuit<span class=\"token punctuation\">;</span>\n  rank<span class=\"token operator\">:</span> TrumpRank<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 각 <code class=\"language-text\">TrumpCard</code> 타입 값의 문양과 랭크는 각각의 이름인 <code class=\"language-text\">suit</code>와 <code class=\"language-text\">rank</code>를\n통해 접근할 수 있습니다.\n아래 예제의 <code class=\"language-text\">isSpade</code> 함수는 주어진 <code class=\"language-text\">TrumpCard</code> 타입의 <code class=\"language-text\">suit</code> 속성을 통해\n<code class=\"language-text\">trumpCard</code>의 문양이 ♠️인 경우에는 true, 아닌 경우에는 false를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isSpade</span><span class=\"token punctuation\">(</span>trumpCard<span class=\"token operator\">:</span> TrumpCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> trumpCard<span class=\"token punctuation\">.</span>suit <span class=\"token operator\">===</span> <span class=\"token string\">\"♠️\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> spadeFour<span class=\"token operator\">:</span> TrumpCard <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  suit<span class=\"token operator\">:</span> <span class=\"token string\">\"♠️\"</span><span class=\"token punctuation\">,</span>\n  rank<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> heartKing<span class=\"token operator\">:</span> TrumpCard <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  suit<span class=\"token operator\">:</span> <span class=\"token string\">\"♥️\"</span><span class=\"token punctuation\">,</span>\n  rank<span class=\"token operator\">:</span> <span class=\"token string\">\"King\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> isSpadeFourSpade <span class=\"token operator\">=</span> <span class=\"token function\">isSpade</span><span class=\"token punctuation\">(</span>spadeFour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">const</span> isHeartKingSpade <span class=\"token operator\">=</span> <span class=\"token function\">isSpade</span><span class=\"token punctuation\">(</span>heartKing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2 id=\"구분-필드를-이용한-가독성-확보\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EB%B6%84-%ED%95%84%EB%93%9C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B0%80%EB%8F%85%EC%84%B1-%ED%99%95%EB%B3%B4\" aria-label=\"구분 필드를 이용한 가독성 확보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구분 필드를 이용한 가독성 확보</h2>\n<p>위의 트럼프 카드 타입 예제에서 조커 카드가 빠졌다고 생각하셨나요?\n위의 트럼프 카드를 확장하면 됩니다.\n이처럼 대수적 타입은 확장에 유연한 구조로 되어 있습니다.\n아래 코드에서는 흑백 조커 카드 <strong>BWJoker</strong>와 컬러 조커 카드 <strong>ColorJoker</strong>를\n<strong>Sum Type</strong>으로 확장한 <code class=\"language-text\">TrumpJoker</code> 타입을 기존의 <code class=\"language-text\">TrumpCard</code> 타입에\n<strong>Sum Type</strong>으로 확장했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpRank</span> <span class=\"token operator\">=</span>\n  <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span>\n  <span class=\"token operator\">|</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">6</span>\n  <span class=\"token operator\">|</span> <span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">8</span> <span class=\"token operator\">|</span> <span class=\"token number\">9</span> <span class=\"token operator\">|</span> <span class=\"token number\">10</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">\"Jack\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Queen\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"King\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpSuit</span> <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"♠️\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"♣️\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"♥️\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"♦️\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpJoker</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"BWJoker\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"ColorJoker\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpCard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  suit<span class=\"token operator\">:</span> TrumpSuit<span class=\"token punctuation\">;</span>\n  rank<span class=\"token operator\">:</span> TrumpRank<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> TrumpJoker<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 대수적 타입을 이용하면 하나의 트럼프 카드 세트에 있는 모든 카드를\n빠르고 간단하게 정의할 수 있습니다.</p>\n<p>그러나 <code class=\"language-text\">TrumpJoker</code> 타입을 추가함으로써 <code class=\"language-text\">isSpade</code> 함수에 에러가 발생하는 것을\n볼 수 있습니다.\n<code class=\"language-text\">TrumpJoker</code> 타입에는 <code class=\"language-text\">suit</code>라는 속성이 없기 때문입니다.</p>\n<blockquote>\n<p>Property ‘suit’ does not exist on type ‘TrumpCard’.\nProperty ‘suit’ does not exist on type ‘“BWJoker”'(2399).</p>\n</blockquote>\n<p>이렇게 변경된 <code class=\"language-text\">TrumpCard</code>에 대응하는 <code class=\"language-text\">isSpade</code>를 확장하는 방법은 다음의\n세 가지가 있습니다.</p>\n<ol>\n<li><code class=\"language-text\">trumpCard</code> 값을 조커의 하위 타입 리터럴과 비교하고, 예외 절에서\n<code class=\"language-text\">suit</code> 속성을 통해 판별한다.</li>\n<li><code class=\"language-text\">trumpCard</code> 값에 <code class=\"language-text\">suit</code> 속성이 존재하는 지 판별하고,\n<code class=\"language-text\">suit</code> 속성이 존재하는 경우에만 <code class=\"language-text\">suit</code> 속성을 통해 판별한다.</li>\n<li><code class=\"language-text\">TrumpCard</code> 타입의 하위 타입을 확장하여, 두 하위 타입을 구분할 수 있는\n별개의 속성 필드를 통해 판별한다.</li>\n</ol>\n<p>여기서는 세 번째 방법을 통해 이 문제를 해결하는 과정을 설명합니다.\n각 방법에는 장/단점이 존재하지만, 세 번째 방법은 추후 <code class=\"language-text\">TrumpCard</code>의\n하위 타입이 병렬적으로 증가할 때 유연하게 대처할 수 있고,\n명확하게 하위 타입 이름을 참조함으로써 코드 가독성을 높이는 장점이 있기\n때문입니다.</p>\n<p>우선 조커가 아닌, <code class=\"language-text\">suit</code>와 <code class=\"language-text\">rank</code> 속성을 가지는 집합인\n<code class=\"language-text\">TrumpNormalCard</code> 타입을 아래와 같이 정의합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpNormalCard</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  suit<span class=\"token operator\">:</span> TrumpSuit<span class=\"token punctuation\">;</span>\n  rank<span class=\"token operator\">:</span> TrumpRank<span class=\"token punctuation\">;</span>\n  trumpType<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">suit</code>와 <code class=\"language-text\">rank</code> 외에 <code class=\"language-text\">trumpType: \"normal\"</code>이 추가된 것에 주목하세요.\n이제 <code class=\"language-text\">TrumpCard</code> 타입의 하위 타입은 이 속성을 통해 구분할 것입니다.</p>\n<p><code class=\"language-text\">TrumpJoker</code> 타입도 <code class=\"language-text\">trumpType</code> 속성을 가지도록 아래와 같이 확장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpJoker</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  jokerType<span class=\"token operator\">:</span> <span class=\"token string\">\"BW\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Color\"</span><span class=\"token punctuation\">;</span>\n  trumpType<span class=\"token operator\">:</span> <span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">TrumpCard</code> 타입을 <code class=\"language-text\">TrumpNormalCard</code>와 <code class=\"language-text\">TrumpJoker</code>의 Sum Type으로\n구성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TrumpCard</span> <span class=\"token operator\">=</span> TrumpNormalCard <span class=\"token operator\">|</span> TrumpJoker<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code class=\"language-text\">isSpade</code> 함수에서 <code class=\"language-text\">trumpCard</code>의 <code class=\"language-text\">suit</code> 속성을 바로 확인하지 않고,\n<code class=\"language-text\">trumpType</code>을 먼저 판별하도록 수정합니다.\n<code class=\"language-text\">trumpType</code>이 <code class=\"language-text\">normal</code>일 때만 <code class=\"language-text\">suit</code> 속성을 통해 판별합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isSpade</span><span class=\"token punctuation\">(</span>trumpCard<span class=\"token operator\">:</span> TrumpCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>trumpCard<span class=\"token punctuation\">.</span>trumpType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"normal\"</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> trumpCard<span class=\"token punctuation\">.</span>suit <span class=\"token operator\">===</span> <span class=\"token string\">\"♠️\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"joker\"</span><span class=\"token operator\">:</span>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 <code class=\"language-text\">isSpade</code> 함수는 <code class=\"language-text\">joker</code> 값들로 확장된 <code class=\"language-text\">TrumpCard</code>의 모든 경우에\n대응할 수 있는 함수로 거듭났고,\n누가 보더라도 이해할 수 있도록 작성되었습니다.\n다른 방식으로 <code class=\"language-text\">isSpade</code>를 구현하면 어떻게 될까요?</p>\n<p><strong>1. <code class=\"language-text\">trumpCard</code> 값을 조커의 하위 타입 리터럴과 비교하고, 예외 절에서\n<code class=\"language-text\">suit</code> 속성을 통해 판별한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isSpade</span><span class=\"token punctuation\">(</span>trumpCard<span class=\"token operator\">:</span> TrumpCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trumpCard <span class=\"token operator\">===</span> <span class=\"token string\">\"BWJoker\"</span> <span class=\"token operator\">||</span> trumpCard <span class=\"token operator\">===</span> <span class=\"token string\">\"ColorJoker\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> trumpCard<span class=\"token punctuation\">.</span>suit <span class=\"token operator\">===</span> <span class=\"token string\">\"♠️\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>TypeScript의 타입 추론은 강력하기 때문에, early return에서 반환되지 않은\n<code class=\"language-text\">trumpCard</code> 타입은 <code class=\"language-text\">suit</code> 속성을 가진다는 것을 보장합니다.\n그러나 조커의 종류가 흑백과 색상을 가지는 두 종류였기에 다행이지,\n수십 개의 중첩된 타입 집합이었다면 모든 최하위 타입의 값을 전부 배제하도록\n코드를 작성해야 했을 것입니다.</p>\n<p><strong>2. <code class=\"language-text\">trumpCard</code> 값에 <code class=\"language-text\">suit</code> 속성이 존재하는 지 판별하고,\n<code class=\"language-text\">suit</code> 속성이 존재하는 경우에만 <code class=\"language-text\">suit</code> 속성을 통해 판별한다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isSpade</span><span class=\"token punctuation\">(</span>trumpCard<span class=\"token operator\">:</span> TrumpCard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"suit\"</span> <span class=\"token keyword\">in</span> trumpCard<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> trumpCard<span class=\"token punctuation\">.</span>suit <span class=\"token operator\">===</span> <span class=\"token string\">\"♠️\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우, 첫 번째 방식과 같이 번잡하게 모든 경우를 쓸 필요는 없어졌습니다.\n그러나 이 함수가 단순히 하나의 필드만 참조하고,\n하위 타입을 단순히 하나의 필드를 통해 분별할 수 있어서 깔끔한 코드를 작성할\n수 있었고,\n하위 타입끼리 공유되는 필드를 가지고 있는 경우엔 그들을 구분할 수 있는\n서브 타입을 찾아야 하며,\n코드상으로 드러나는 구분 방식도 직관적이지 않을 것입니다.</p>\n<p>예를 들어, 온라인 쇼핑몰 사례를 살펴보겠습니다.\n고객(Customer), 관리자(Admin), 판매자(Seller)가 <code class=\"language-text\">username</code>과 <code class=\"language-text\">password</code>란\n공통 속성을 가진 상황을 정의하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ShoppingItem</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Store</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  location<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  items<span class=\"token operator\">:</span> ShoppingItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Seller</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  profit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  stores<span class=\"token operator\">:</span> Store<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Customer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  cart<span class=\"token operator\">:</span> ShoppingItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Admin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  storeList<span class=\"token operator\">:</span> Store<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  userList<span class=\"token operator\">:</span> Customer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  sellerList<span class=\"token operator\">:</span> Seller<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserType</span> <span class=\"token operator\">=</span> Customer <span class=\"token operator\">|</span> Admin <span class=\"token operator\">|</span> Seller<span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약 <code class=\"language-text\">UserType</code> 타입의 값을 인자로 받는 함수가 있고,\n이 함수가 사용자의 유형별로 처리해야 한다면,\n하위 타입을 고유하게 구분할 수 있는 속성군을 추려내야 할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">applyToUserType</span><span class=\"token punctuation\">(</span>userType<span class=\"token operator\">:</span> UserType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"cart\"</span> <span class=\"token keyword\">in</span> userType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...Customer의 처리문</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"sellerList\"</span> <span class=\"token keyword\">in</span> userType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...Admin의 처리문</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"profit\"</span> <span class=\"token keyword\">in</span> userType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...Seller의 처리문</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 이 방법은, 코드를 작성할 때는 고유한 속성을 고려해야 하고,\n코드를 읽을 때는 속성으로부터 고유한 집합군을 연상해야 하는 문제가 있습니다.</p>\n<h2 id=\"대수적-데이터-타입을-이용한-안전한-개발\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%88%98%EC%A0%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%95%88%EC%A0%84%ED%95%9C-%EA%B0%9C%EB%B0%9C\" aria-label=\"대수적 데이터 타입을 이용한 안전한 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대수적 데이터 타입을 이용한 안전한 개발</h2>\n<p>대수적 데이터 타입을 이용하면 더 쉽게 안전한 개발이 가능합니다.\n타입을 확장할 때 곱 타입을 이용한 확장인지, 합 타입을 이용한 확장인지\n결정함으로써 새로 확장되는 타입이 가지게 될 역할의 범주가 결정되고,\n이렇게 결정된 범주를 기반으로 TypeScript 린터와 컴파일러는\n코드를 실행하기도 전에 값의 유효성을 검사하고 보장합니다.</p>\n<p>예를 들어, 위의 <code class=\"language-text\">TrumpCard</code> 예제에서 <code class=\"language-text\">TrumpCard</code> 타입을 유효하지 않은 값으로\n설정하려 하면 TypeScript 컴파일러는 다음과 같이 경고를 발생시킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> cardInstance<span class=\"token operator\">:</span> TrumpCard <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  suit<span class=\"token operator\">:</span> <span class=\"token string\">\"👍\"</span><span class=\"token punctuation\">,</span>\n  rank<span class=\"token operator\">:</span> <span class=\"token string\">\"😎\"</span><span class=\"token punctuation\">,</span>\n  trumpType<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Type ‘“👍“’ is not assignable to type ‘TrumpSuit’(2322).</p>\n<p>Type ‘“😎“’ is not assignable to type ‘TrumpRank’(2322).</p>\n</blockquote>\n<p>뿐만 아니라 IDE에서는 이러한 ADT들을 이해하여 해당 타입의 심볼을 정의할 때에\n유효한 값의 목록을 보여주기도 합니다.</p>\n<p>Sum Type으로 정의된 타입에 대해서 <code class=\"language-text\">switch-case</code> 분기문을 작성할 때\n<code class=\"language-text\">default</code>로 fallback을 기재하지 않으면,\n<code class=\"language-text\">case</code>로 명시하지 않은 <strong>Sum Type</strong>의 하위 타입이 있음을 나타내는\n경고를 보여주기도 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">NameOfSuit</span><span class=\"token punctuation\">(</span>trumpSuit<span class=\"token operator\">:</span> TrumpSuit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>trumpSuit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"♠️\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"Spade\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Not all code paths return a value(7030).</p>\n</blockquote>\n<p>이러한 대수적 데이터 타입을 이용한 React 애플리케이션 개발에서는,\nSum/Product 타입으로 컴포넌트의 입력 Prop(Property) 타입을 설계하고,\n각 Prop으로부터 마크업으로의 단사 함수(Injective Function)를 정의함으로써\n컴포넌트를 구현할 수 있습니다.</p>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>지금까지 신뢰할 수 있는 원소 집합에서 타입을 합성하고\n확장할 수 있게 하는 대수적 데이터 타입에 대해 알아보았습니다.</p>\n<p>이처럼 견고한 타입 시스템은 사람이 코드를 작성할 때 발생할 수 있는\n사소한 실수부터 작성된 프로그램이 실행될 때 발견될 수 있는 에러들을\n컴파일 타임에 확인함으로써,\n에러가 적고, 고치기 쉽고, 명확한 프로그램을 기술하는 데 큰 도움을\n주고 있습니다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-주1\">2021년 11월 16일, 원프레딕트 기술 블로그에 발행된 글.<a href=\"#fnref-%EC%A3%BC1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/typescript-algebric-type/"},"frontmatter":{"title":"TypeScript를 이용한 대수적 타입","date":"September 30, 2023","description":"대수적 데이터 타입이 무엇인지, TypeScript 코드와 함께 설명합니다.\n","author":{"name":"김민상","avatar":"/images/avatars/justive.png","greeting":"원프레딕트 프론트엔드 엔지니어"}}},"previous":{"fields":{"slug":"/typescript-schema-test/"},"frontmatter":{"title":"TypeScript로 API JSON Schema 테스트하기"}},"next":{"fields":{"slug":"/python-web-application-architecture/"},"frontmatter":{"title":"객체지향 파이썬을 위하여"}}},"pageContext":{"id":"d6f7f694-22c7-51a5-86e8-60704914dc4c","previousPostId":"134cb196-3290-5ccd-9e39-82b0fb829a6d","nextPostId":"5494e49a-6e3b-5960-9428-00b642c59485"}},"staticQueryHashes":["2094693779"],"slicesMap":{}}
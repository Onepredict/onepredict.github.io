{"componentChunkName":"component---src-templates-blog-post-js","path":"/about-scene/","result":{"data":{"site":{"siteMetadata":{"title":"Onepredict Engineering"}},"markdownRemark":{"id":"fff4c166-9970-52c5-9b6b-e1431e5e9736","excerpt":"Intro. Scene 이란? Element 란? Scene 만들어 보기 Text Element 만들기 마무리. Intro. Onepredict Frontend 팀은 설비의 상태를 예측하고 진단할 수 있는 예지보전 솔루션을 위한 대시보드 개발을 하고 있습니다. B2B…","html":"<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#intro\">Intro.</a></li>\n<li><a href=\"#scene-%EC%9D%B4%EB%9E%80\">Scene 이란?</a></li>\n<li><a href=\"#element-%EB%9E%80\">Element 란?</a></li>\n<li><a href=\"#scene-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0\">Scene 만들어 보기</a></li>\n<li><a href=\"#text-element-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Text Element 만들기</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리.</a></li>\n</ul>\n</div>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro.</h2>\n<p>Onepredict Frontend 팀은 설비의 상태를 예측하고 진단할 수 있는 예지보전 솔루션을 위한 대시보드 개발을 하고 있습니다.</p>\n<p>B2B 사업의 특성상 고객사의 요청 사항에 대응하기 위한 커스터마이징 필요한데, 동일한 API를 사용하더라도 어느 고객사는 테이블로 보여주고 어느 고객사는 그래프로 보여주는 식으로 말이죠.</p>\n<p>모든 요청 사항을 개발하다 보면 대시보드가 비대해지거나 git에서 고객사별 branch가 파편화되어 생성될 수도 있습니다. 이렇게 쌓이다 보면 결국 비대해진 프로젝트는 복잡하고 유지보수하기 어려운 코드가 만들어지고, 개발의 퍼포먼스가 줄어들게 됩니다.</p>\n<p>저희는 이러한 문제들에 대해서 고민하였고 고객사들의 커스터마이징에 유연하게 대처할 수 있고 현장에서도 가능하다면 빠르게 대응할 방안을 고민한 끝에 Scene이라는 메타포를 만들었습니다.</p>\n<h2 id=\"scene-이란\" style=\"position:relative;\"><a href=\"#scene-%EC%9D%B4%EB%9E%80\" aria-label=\"scene 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scene 이란?</h2>\n<p>Scene은 canvas처럼 빈 Box Layer로 우리가 그리고 싶은 Element를 배치하여 대시보드 화면을 만들어 낼 수 있습니다. 이 모든 Scene은 Backend로부터 전달받아 렌더링이 이루어지기 때문에 프론트엔드의 배포 없이도 대시보드 화면을 수정하고 변경하는 게 가능해집니다.</p>\n<h2 id=\"element-란\" style=\"position:relative;\"><a href=\"#element-%EB%9E%80\" aria-label=\"element 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Element 란?</h2>\n<p>Scene 내부에서 렌더링할 때 필요한 Component를 Element라 부릅니다. Element는 몇 가지의 규칙으로 만들어집니다. Element는 독자적으로 렌더링할 수 있어야 하고 내부적으로 API에 대한 참조는 일어나지 않습니다. 모든 데이터는 Prop을 통해 전달받습니다.</p>\n<h2 id=\"scene-만들어-보기\" style=\"position:relative;\"><a href=\"#scene-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B3%B4%EA%B8%B0\" aria-label=\"scene 만들어 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scene 만들어 보기</h2>\n<p>이제 간단한 Text Element를 만들어 보면서 Scene이 어떻게 구성되어 있고 Element를 어떻게 만드는지 알아보도록 하겠습니다.</p>\n<p>Scene은 JSON으로 구성됩니다. 그리고 각 Scene은 단일 JSON 파일들로 하나의 Box Layer를 렌더링할 수 있는 메타 데이터들을 가지고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"sceneId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"layout\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"width\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100px\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"elements\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>...<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 JSON 은 1이라는 ID를 가지는 Scene의 예로 sceneId는 Scene 의 고유한 ID를 나타내며 프론트엔드에서 Scene을 구분하기 위한 Unique ID로 사용됩니다. layout은 Scene의 전체적인 layout을 설정 할 수 있으며 elements는 Scene에 렌더링 될 Element의 리스트 입니다.</p>\n<p>각각의 Element는 고유한 type을 가지며 type을 통해 렌더링할 Element를 선택할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"sceneId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"layout\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"width\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100px\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"elements\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Text\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"layout\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20px\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"20px\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, Scene\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 JSON에서는 Text라는 type의 Element를 렌더링할 수 있습니다. Scene의 Box Layer 안에서 top: 20px left: 20px 로 Text Element의 위치를 설정하고 해당 위치에 Hello, Scene이라는 Text를 렌더링합니다.</p>\n<p>끝입니다!</p>\n<p>그럼, Element는 어떻게 되어 있을까요?</p>\n<h2 id=\"text-element-만들기\" style=\"position:relative;\"><a href=\"#text-element-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"text element 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Text Element 만들기</h2>\n<p>Element는 Scene에서 렌더링 되는 Component입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Text.tsx</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TextProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> ElementProps<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Text</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> TextProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">,</span> layout <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>layout<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Text<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Element는 위와 같이 만들 수 있습니다. 그리고 Element를 Scene에서 읽을 수 있도록 elementMap에 등록합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// elementMap.ts</span>\n<span class=\"token keyword\">import</span> Text <span class=\"token keyword\">from</span> <span class=\"token string\">'./Text'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> elementMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Text<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Scene에서 Text 엘리먼트를 읽을 수 있는 준비가 되었습니다. 이제 Scene에서 Element를 읽고 렌더링하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Scene.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> elementMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./elementMap'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">SceneProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Scene JSON</span>\n  scene<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SceneType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> ElementProps<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Scene</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> SceneProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scene <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sceneId<span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">,</span> layout <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> scene <span class=\"token operator\">??</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>layout<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>elements<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>elementProp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sceneId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> elementMap<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>elementProp<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Scene<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에서 Scene은 어떤 Element를 렌더링해야 할지 알지 못합니다. 그저 전달받은 elements를 렌더링 하는 역할만 할 뿐입니다. 이로써 간단한 Text를 렌더링하는 Scene을 만들었습니다.</p>\n<p>그렇다면 Element로 데이터 연결은 어떻게 하는 걸까요?</p>\n<p>여기에 대해서 저희는 Channel이라는 메타포를 생각했습니다. 모든 데이터는 Channel Id를 가지고 Channel의 Signal을 통해 데이터를 조회할 수 있습니다. Channel에 대한 더 자세한 설명의 이 글의 범위를 벗어나는 것 같아 여기까지 하고 Element에서 Channel을 연결하여 데이터를 보여주는 방법에 대해서 알아보도록 하겠습니다.</p>\n<p>간단한 예로 Channel을 연결한 Element를 만들어 보겠습니다.</p>\n<p>아래는 데이터를 보여주기 위해서 RPM<sup id=\"fnref-주1\"><a href=\"#fn-주1\" class=\"footnote-ref\">주1</a></sup>이라는 Element 가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// RPM.tsx</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RPMProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// RPM Channel</span>\n  rpm<span class=\"token operator\">:</span> ChannelType<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> ElementProps<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">RPM</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> RPMProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> rpm<span class=\"token operator\">:</span> rpmChannel<span class=\"token punctuation\">,</span> signals <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> rpm <span class=\"token operator\">=</span> signals<span class=\"token punctuation\">[</span>rpmChannel<span class=\"token punctuation\">.</span>channelId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>rpm<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token constant\">RPM</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 RPM의 prop은 ChannelType의 rpm 값을 prop으로 전달받습니다. 이 ChannelType은 channelId property를 가지고 있습니다. 여기서 channelId를 가지고 signals prop에서 우리가 필요한 Channel의 Signal을 찾아 렌더링합니다. 그렇다면 이 signals는 어디서 오는 걸까요?</p>\n<p>그건 위의 Scene에서 signals 데이터를 그대로 하위로 전달 해주고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Scene.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> elementMap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./elementMap'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Scene</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> SceneProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scene<span class=\"token punctuation\">,</span> signals <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> sceneId<span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">,</span> layout <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> scene <span class=\"token operator\">??</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>layout<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>elements<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>elementProp <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sceneId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>element<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> elementMap<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Component key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>elementProp<span class=\"token punctuation\">}</span> signals<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>signals<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Scene<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 Scene 구현체에서 달라진 건 props에서 signals를 받아 이 signals를 하위 Element로 전달하고 있습니다. 즉, Scene을 구현하는 Parent Component로부터 모든 Scene 정보와 Signal 정보를 받아 렌더링할 모든 Element로 전달합니다. 이렇게 되면 Element에서는 어떤 Channel Id에서 데이터를 가져와야 하는지만 알 뿐 거기서 어떤 데이터가 나오는지는 알지 못합니다. 그저 전달받은 Channel Id로 렌더링할 뿐입니다.</p>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리.</h2>\n<p>간단하게 이번 저희 Frontend 팀에서 진행했던 프로젝트에 적용한 Scene에 대해서 알아봤습니다.  Scene을 작업하며 느꼈던 장점은 Element 간의 의존성이 낮으므로 Element의 변경이 쉽다는 장점이 있었습니다. 하지만 Scene 은 대시보드 전체 영역에서 하나의 영역을 그리기 위한 용도이고 전체적인 레이아웃을 책임지지는 않습니다. 이 문제에 대한 해답을 또 고민하고 해결해야 할 수도 있습니다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-주1\">revolutions per minute의 약자입니다.<a href=\"#fnref-%EC%A3%BC1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/about-scene/"},"frontmatter":{"title":"커스텀 대시보드를 위한 Scene","date":"November 29, 2023","description":"커스텀 대시보드 개발하기","author":{"name":"이원배","avatar":"https://avatars.githubusercontent.com/u/16735460","greeting":"원프레딕트 프론트엔드 엔지니어"}}},"previous":{"fields":{"slug":"/sql-orm/"},"frontmatter":{"title":"SQL VS ORM"}},"next":{"fields":{"slug":"/playwright-e2e-part1/"},"frontmatter":{"title":"사용자 동작을 중심으로 Playwright로 E2E 테스트 작성하기 - Part 1"}}},"pageContext":{"id":"fff4c166-9970-52c5-9b6b-e1431e5e9736","previousPostId":"c024443e-e16e-5384-ad53-4e9c9208850e","nextPostId":"6891c193-9f61-515f-b029-6c4a354f6205"}},"staticQueryHashes":["2094693779"],"slicesMap":{}}
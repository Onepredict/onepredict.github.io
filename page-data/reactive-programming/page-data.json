{"componentChunkName":"component---src-templates-blog-post-js","path":"/reactive-programming/","result":{"data":{"site":{"siteMetadata":{"title":"Onepredict Engineering"}},"markdownRemark":{"id":"8ee006c1-a76e-5472-9b9d-ab2e8f1d2dbb","excerpt":"프론트 데스크에서 발표한 내용을 엔지니어링 블로그에 공유합니다.  Intro Fine-Grained Reactivity Signal(신호) Reaction(반응) Derivations(파생) React SolidJS 반응형 모델 Signal(createSignal) Reaction…","html":"<blockquote>\n<p>프론트 데스크에서 발표한 내용을 엔지니어링 블로그에 공유합니다. <sup id=\"fnref-주1\"><a href=\"#fn-주1\" class=\"footnote-ref\">주1</a></sup></p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#intro\">Intro</a></p>\n</li>\n<li>\n<p><a href=\"#fine-grained-reactivity\">Fine-Grained Reactivity</a></p>\n<ul>\n<li>\n<p><a href=\"#signal%EC%8B%A0%ED%98%B8\">Signal(신호)</a></p>\n</li>\n<li>\n<p><a href=\"#reaction%EB%B0%98%EC%9D%91\">Reaction(반응)</a></p>\n</li>\n<li>\n<p><a href=\"#derivations%ED%8C%8C%EC%83%9D\">Derivations(파생)</a></p>\n<ul>\n<li><a href=\"#react\">React</a></li>\n<li><a href=\"#solidjs\">SolidJS</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EB%AA%A8%EB%8D%B8\">반응형 모델</a></p>\n</li>\n<li>\n<p><a href=\"#signalcreatesignal\">Signal(createSignal)</a></p>\n</li>\n<li>\n<p><a href=\"#reactioncreateeffect\">Reaction(createEffect)</a></p>\n</li>\n<li>\n<p><a href=\"#derivations\">Derivations</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>Reactive Programming(반응형 프로그래밍)을 간단하게 설명하기 좋은 예시는\n스프레드시트입니다.\n어떠한 수식을 선언적으로 작성해 두고 수식에서 사용되는 데이터가 변경되면\n수식에 반영되는 데이터 흐름을 확인할 수 있습니다.\n이렇게 데이터의 흐름과 변경 사항의 전파에 중점을 둔 선언적 프로그래밍을\n하고자 하는 패러디임을 반응형 프로그래밍이라고 합니다.\n우리가 사용하는 React는 반응형 프로그래밍일까요?</p>\n<p><code class=\"language-text\">useState</code>를 사용하여 UI를 업데이트하는 React Component를 구사하는 방식은\n반응형 프로그래밍과 같아 보이기도 하지만,\nReact는 스케줄링을 설명할 때 데이터가 갱신되면 “Push”하는 방식이 아닌\n계산이 필요할 때까지 지연될 수 있는 “Pull” 방식을 고수한다고 합니다.\n이 말은 위에서 설명한 데이터의 흐름과 변경 사항의 전파로 처리되는\n반응형 프로그래밍의 방식과는 거리가 있어 보입니다.\n또한 본인들은 완전한 반응형(fully reactive)이 되길 원치 않는다고 합니다.</p>\n<p>그럼 완전한 반응형 프로그래밍이란 무엇일까요?\n이것을 더 잘 다루는 프레임워크(라이브러리)는\nVue.js, Svelte, SolidJS, Knockout.js, MobX 등이 있는데\nSolidJS에서는 <code class=\"language-text\">Fine-Grained Reactivity</code>이라는 개념을 이야기합니다.</p>\n<h2 id=\"fine-grained-reactivity\" style=\"position:relative;\"><a href=\"#fine-grained-reactivity\" aria-label=\"fine grained reactivity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fine-Grained Reactivity</h2>\n<p>Fine-Grained Reactivity란 말 그대로 세밀한 반응형입니다.\nReact처럼 상태가 변경되었을 때 컴포넌트 전체가 리렌더링 되는 것이 아니라,\n일부 변경이 필요한 곳에서만 갱신이 일어나죠.\n아래에서 SolidJS에서 쓰이는 반응형 프로그래밍의 세 가지 요소를 살펴보겠습니다.</p>\n<h3 id=\"signal신호\" style=\"position:relative;\"><a href=\"#signal%EC%8B%A0%ED%98%B8\" aria-label=\"signal신호 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signal(신호)</h3>\n<p>Signal은 반응형 프로그래밍에서 기본적인 타입입니다.\n<code class=\"language-text\">getter</code>와 <code class=\"language-text\">setter</code>로 구성되어 있습니다.\n반응형 프로그래밍에서 사용되는 데이터로서, 변화를 추적합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSignal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"solid-js\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span> <span class=\"token operator\">=></span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token literal-property property\">Count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter</code></pre></div>\n<h3 id=\"reaction반응\" style=\"position:relative;\"><a href=\"#reaction%EB%B0%98%EC%9D%91\" aria-label=\"reaction반응 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction(반응)</h3>\n<p>Signal을 관찰하고 그 값이 업데이트될 때마다 Signal을 다시 실행합니다.\n의존성을 명시하는 것이 아니라, 그를 사용하는 것 자체를 구독합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createEffect<span class=\"token punctuation\">,</span> createSignal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"solid-js\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"outer log, count: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">createEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inner log, count: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token literal-property property\">Count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter</code></pre></div>\n<h3 id=\"derivations파생\" style=\"position:relative;\"><a href=\"#derivations%ED%8C%8C%EC%83%9D\" aria-label=\"derivations파생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Derivations(파생)</h3>\n<p>Signal의 파생 데이터는 어떻게 할까요?\n이 파생 데이터를 Reaction에서 사용하게 된다면\n매번 재연산하여 비용이 클 것입니다.\n이를 메모이제이션을 하고자 할 때 아래와 같이 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createEffect<span class=\"token punctuation\">,</span> createSignal<span class=\"token punctuation\">,</span> createMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"solid-js\"</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1. Signals 생성\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> setA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"옐로우\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> setB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"망고\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token function\">createMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"파생 데이터 생성/변경\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2. Reactions 생성\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">createEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"를 먹었다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">createEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"는 맛있었다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3. a 갱신\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"애플\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1. Signals 생성</span>\n<span class=\"token comment\">// 2. Reactions 생성</span>\n<span class=\"token comment\">// 파생 데이터 생성/변경</span>\n<span class=\"token comment\">// 옐로우 망고를 먹었다.</span>\n<span class=\"token comment\">// 옐로우 망고는 맛있었다.</span>\n<span class=\"token comment\">// 3. a 갱신</span>\n<span class=\"token comment\">// 파생 데이터 생성/변경</span>\n<span class=\"token comment\">// 애플 망고를 먹었다.</span>\n<span class=\"token comment\">// 애플 망고는 맛있었다.</span></code></pre></div>\n<p>위 방식들은 React에서도 흔히 사용되는 <code class=\"language-text\">useState</code>, <code class=\"language-text\">useEffect</code>, <code class=\"language-text\">useMemo</code>와\n같은 것들과 대조할 수 있는데,\n결과적으로는 어떠한 차이가 나는지 구현을 어떻게 했는가에 따라 다르겠지만\n그들이 추구하는 방식이 어떤 결과로 이어지는지 아래 간단히 렌더링 결과로\n차이를 확인해 보겠습니다.</p>\n<h4 id=\"react\" style=\"position:relative;\"><a href=\"#react\" aria-label=\"react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        You pressed me <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter</code></pre></div>\n<p><img src=\"/e73a845ebaaeaec2db461a187828bdb5/react-rendering.gif\" alt=\"React의렌더링\" title=\"React의 렌더링\"></p>\n<h4 id=\"solidjs\" style=\"position:relative;\"><a href=\"#solidjs\" aria-label=\"solidjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SolidJS</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createEffect<span class=\"token punctuation\">,</span> createSignal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"solid-js\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token literal-property property\">Count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Hello <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter</code></pre></div>\n<p><img src=\"/29ca7158cb9483a9b2a5462cfdb2a12c/solidjs-rendering.gif\" alt=\"그림\" title=\"SolidJS의 렌더링\"></p>\n<p>React는 컴포넌트 내용이 전부 리렌더링되고 SolidJS는 상태를 구독하는\n일부만 리렌더링이 되고 있습니다.</p>\n<h3 id=\"반응형-모델\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EC%9D%91%ED%98%95-%EB%AA%A8%EB%8D%B8\" aria-label=\"반응형 모델 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반응형 모델</h3>\n<p>SolidJS가 반응형을 어떤 방식으로 구현했는지 살펴보겠습니다.</p>\n<h3 id=\"signalcreatesignal\" style=\"position:relative;\"><a href=\"#signalcreatesignal\" aria-label=\"signalcreatesignal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signal(createSignal)</h3>\n<p>Reaction을 담고 있는 <code class=\"language-text\">runningContext</code>가 존재하고,\nSignal은 자신을 구독하는 구독 리스트로 <code class=\"language-text\">subscriptions</code>를 둡니다.\n이 두 가지로 의존성을 추적하게 되고 변화에 따라 반응이 일어나도록\n`read`` 함수를 실행시킵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> runningContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">running<span class=\"token punctuation\">,</span> subscriptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span>\n  running<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>subscriptions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> subscriptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">read</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentRunning <span class=\"token operator\">=</span> runningContext<span class=\"token punctuation\">[</span>runningContext<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>currentRunning<span class=\"token punctuation\">,</span> subscriptions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">write</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">nextValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> nextValue\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sub <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>subscriptions<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sub<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>read<span class=\"token punctuation\">,</span> write<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"reactioncreateeffect\" style=\"position:relative;\"><a href=\"#reactioncreateeffect\" aria-label=\"reactioncreateeffect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction(createEffect)</h3>\n<p>Reaction이 실행될 때 자신이 어떤 값에 의존하고 있는지 관리하기 위한\n<code class=\"language-text\">dependencies</code> 속성을 두고,\n자신이 실행될 때마다 구독을 <code class=\"language-text\">cleanup</code>하고 재구독하는 과정으로 동작합니다.\n이 과정을 통해 Signal의 의존성을 동적으로 관리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">running</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> dep <span class=\"token keyword\">of</span> running<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dep<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  running<span class=\"token punctuation\">.</span>dependencies<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">run</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span>\n    runningContext<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>running<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      runningContext<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> running <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    run<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">depdendencies</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"derivations\" style=\"position:relative;\"><a href=\"#derivations\" aria-label=\"derivations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Derivations</h3>\n<p>파생은 Signal과 React을 사용해 계산된 값을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createMemo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>computed<span class=\"token punctuation\">,</span> set<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createSignal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">createEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> computed\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>여기까지 간단하게 반응형 프로그래밍에서 사용되는 세 가지 요소와\n이점이 무엇인지 살펴보았습니다.\n이외에 반응형 프로그래밍을 구현하기 위해 유의해야 할 사항들이 더 존재합니다.\n이는 <a href=\"https://www.solidjs.com/guides/getting-started\">SolidJS 공식 문서</a>를\n확인해 보실 수 있습니다(무려 한글입니다!).\n반응형 프로그래밍을 살펴보면서 프레임워크들이 앞으로 어떤 방향성을 가지고\n개발되고 있는지 한번 확인해 보면 좋은 공부가 될 것입니다.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-주1\">원프레딕트의 모든 프론트엔드 엔지니어는 매주 목요일에\n기술 주제를 나누는데, 이 모임의 이름이 ‘프론트 데스크’입니다.<a href=\"#fnref-%EC%A3%BC1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"/reactive-programming/"},"frontmatter":{"title":"반응형 프로그래밍이란 무엇인가?","date":"November 08, 2023","description":"Reactive Programming(반응형 프로그래밍)을 간단하게 설명하기 좋은 예시는\n스프레드시트입니다.\n","author":{"name":"강정진","avatar":"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/618cc577e601490068af0c1a/80b1ed7f-998f-460f-b77d-a0bf3e0f816f/128","greeting":"원프레딕트 프론트엔드 엔지니어"}}},"previous":{"fields":{"slug":"/violation-hook-rule/"},"frontmatter":{"title":"장인은 도구탓을 하지 않는다. 주니어도 그렇다."}},"next":{"fields":{"slug":"/failure-retrospective/"},"frontmatter":{"title":"신입 개발자의 인덱스 장애 회고담"}}},"pageContext":{"id":"8ee006c1-a76e-5472-9b9d-ab2e8f1d2dbb","previousPostId":"fcc68718-2fb4-5c86-9339-eff6b7e74dec","nextPostId":"e321eea4-2541-5f0b-816c-1ed53faf8957"}},"staticQueryHashes":["2094693779"],"slicesMap":{}}